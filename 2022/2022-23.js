globalThis.l=console.log
Object.prototype.cp=function(){
    return JSON.parse(JSON.stringify(this))
}
Array.prototype.vis = function(){
    for(let i=0;i<this.length; ++i){
        l(this[i].join``)
    }
}

let inp1=
`.....
..##.
..#..
.....
..##.
.....`
,inp2=`....#..
..###.#
#...#.#
.#...##
#.###..
##.#.##
.#..#..`
,inp3=`###..#####..#....##.#..#...#.#.#..#.##..##...#.#.###.#.###...###.#....
#..#..#.#....#.#.####.#.#.....#..####...####.##.#.#....####...#..#.#..
...##...#.#####..###......#.#.#..##.#..#..#####.#..###.#.####.#.####..
#.#...#...#.#..##.#.#..#.####...#.#####.###.##....##.###.#.##..####.#.
...##.##..#.##.###..##.####.##.#...##...#.#...#.##.#..##...###.###....
.......#.#..#.#....#....#.....##...#.#...###..#..#.##...#....##...#..#
#.##..#.#..#.#####.#.#....##..#..##..###...#.###.####.#.....#..#.#.##.
.#####.......###.##.#....#...##.#.#...#.######...##.#.#.###...###..#..
.#.###..#####.##.##...#..##..#.#..#.####.##..###.##..##..##..##..##.#.
..##..###.###.....#...###.#.#...#####.##..######.#.#.#...#..####....#.
.#.....#..#........#####.###.##..#.####..#.#.#.###.###.#.....###.....#
.#.##....#..#..#..#..#.#.#.....###.##.####.###.#..#..###..##.......###
##.##..###...##....#....#........#.#######....#..#.##..#.##...#.#####.
.#####.#.#.######.##....#..###.##......####..#...#.##.######...####.##
#..###..#...##.##..#.#.....##...#.##.#.####.###.##....#.###.###...#.##
..##.#...###...#...###.#.#.###.#.####..##..#...#..##...#..####...#.###
###.....#..#....#.#......###..##.#...####...#..########..#.##.....####
###..##....#.......#..###.#.#..##..#...###.......###....###.##..#..##.
#..#.#..#.###....#.##.#.....#.##.##..#.##.###..##..###.##.###..#.##...
#..#....#..##......###.######..#..#####.##...#.#..#..##..#.#....####.#
.....#...#..####..##..#.#.##..##.###..#.###..#....##.##.##.####.......
...#..#.####....###.#......#..###.##.#.#..##.#..#####.###..###..##.###
#.###...#.#####..##.##..#.#....###.####.##.....####..#...#.###.#####..
..#####.#...#.#..#..#.#.#.#.#......#.##.#.....##....#.##..###..####..#
...#####.#.#..#..###..##.#.##.##...#.##.#.##.#.#.....#.###..####.#.#..
####....##.##....#.#.###.##..#.#......#....#.###..#.#######.#..##...#.
#.#..#..####..#.#...##.#...###.....##.###...#.#.#####.#....###.###.##.
#.####.....#........##.#..##..##.###.#.##.#.#.#...##..#########.###..#
#.#.#..#########.###.##..###.#...#.##.#..#....###...###.#..##.##.##...
.#.#..##.......###.##.#.##......###..#....###.#...###.#.....#.#####...
##.##..#.#..#....####.##..######.#.#..##...#...##.#.##..#.#....#.#.#.#
.#..#...#.###....#..#.#.#...#####...#.#####.#.....#.#.##.#...##..##.##
.##.#.######.#.####.#..##.#.####.##.##..##.######..#.#######..#.#..##.
.#....#.#.###.##.....#..##.#.#####..##..###.##.#...#.#.#....#....###.#
.#.#.#..#.....##.#....##.#....###.###......#.#..#.#...##...#..#.###..#
..#..#....##.##...#.#...#......#.#####....###.#..#.#..#..#.####..#####
.#.#..#....####..#....##..####.#.#.#...#.##.#..........###.....#..#..#
.#.##.#.#.....##.#...###.....#####.##.##......###.#.##..####.##....#..
...#..##.#..#....#.....##..#.#.##.###.##.#.#..##.#.#...##.#...####...#
##.#.########....#.#..##..#.##...###..#...#.##.###..####.###.......#.#
#.##...##..#####..##..###.#..######..###..######..#.#.#..########.#...
##..##..##.##.##...###..#.#.#..#.#.###.#..#...#..#.#....#..##....#..#.
..#####..#.#.##.##.####.#..#.####.#.#.....#....#.##...##.....###....##
##..####..#.###.##..######.#..#.##.##..####..#.##.#.##.#.#.###.#.##...
#.#...#..##.##...##....#..#..#.#.#####....#.#.#.###..#..#.#..#....#...
#.###....##.........###...###..##.#..#.##.#.....#..#.######..#.###....
#######..###.#..###...#..#####.....#..#...#..##..#....#.#####..###....
.#...###..###....##.##.....#.##.#.###.#.####...#...#.#.##........#.#.#
##..#..#......#.#.###.#.#.#.#....#.#...####.###.##.#.#..###........##.
.#..#..#.#.###..#...#..###.##....#........#.#.#.####.#..#.#.####..#.##
..########..#..#..#.####.####.###.#####..#..######..#.#.#....#......#.
###.##..##.####.#.......###.....####.#.#..#.#.#..#.#..##.###...#.##.##
.....##..#..#.#.#.####...##..######.#.####..#..##.###......###.#....#.
#..###...#..##........#.#.###.##.##..#..#..##.##.#.#..##.#..##.##...#.
..#....#.#.#####.##...#.##.#..##....##.##.#....##..#.######..#.####.#.
#...##.#.##.#.#...#.###.#.#.##.....##.###.#...#.#.#####.######.##.#.##
#.#.###..#.#..####..###..#####.#.........#..####.##.###.###.#....#....
.#.#...#.#.###..##....#..#.###.#...#.#..###..###..#.##.#.##.#.#...##..
...##..#.#.#.###..##...#####..##.#.#.####.#...####.#.#..#..##...##.###
...####..###.###.#.#...#.##...#.###...#.#.#.#.#.....#..#...##..##.#...
##..###...##.#.###.##.##..#.#####.###.......##.####..##.....#.#.##..#.
......##.....#...#.###.##.#..#####.#.###....#.#..###.#....##...##.#.##
...#.#.###.##...##.####..##.##..#...#.#.......##..#..#....##...#.#.#..
..##.....###.....#...#.#.##..###..####.###..###...#..#...#..###...##..
.#.#.#.#..####..#...###.#.#..##.##.#.#..#..##.......#.#..#.####.###.##
#..###..###.#.......#.#...##.###.#....#..#.##.#.##.##.####.####.#####.
###.#...#....#.#..##.#.##.##.#.#..##..##..#####.#.#.#.##.....##.##..##
##.##..#....##...###.##..#...#.....#.#..##......#...#.###....#.#..#..#
##..#..###..####.#.#.#.##.#.###.###.##.#.##....##.#.#..#.#..#.#...###.
#.##..##.#.###..#.#.####.#...#...##..#..##.###.#.#.......#....##.##...`
let inp=inp3.split`\n`.map(r=>r.split``) , g=inp.cp() , prop , rn=0,rx=g.length-1,cn=0,cx=g[0].length-1 
  , dirs=[[-1,0],[1,0],[0,-1],[0,1]] , sd=0 , rc=0
  , bms =[  224 ,  14 ,  131 ,  56 ]

// l(inp)
// inp.vis()

// l(evasur(2,3).toString(2))
for(let i=0; i<10; ++i){
    round()
}
trim()
// g.vis()
l('part 1',count_empty())

while(true) round()

function count_empty(){
    let c=0
    for(let i=0;i<g.length;++i) for(let j=0;j<g[i].length;++j) c+=g[i][j]=='.'
    return c
}

function trim(){
    while(g[g.length-1].join``.match(/^\.+$/))    {g.pop()}
    while(g[0].join``.match(/^\.+$/))             {g.shift()}
    if(cx<g[0].length-1) {for(let i=0;i<g.length;++i)g[i].pop()}
    if(cn>0)             {for(let i=0;i<g.length;++i)g[i].shift()}
    rn=0;cn=0;rx=g.length-1;cx=g[0].length-1
}

function move(){
    // rn=1,cn=1,rx=1,cx=1
    if(prop.size) rc++
    else {l('no move',rc+1);process.exit(0)}
    for(let [key,v] of prop.entries()){
        if(v===null) continue
        let [r,c]=key.split`,`.map(Number)
        g[r][c]='#' ; g[v[0]][v[1]]='.'
             if(r<rn) rn=r
        else if(r>rx) rx=r
             if(c<cn) cn=c
        else if(c>cx) cx=c
    }
}

function proposeAll(){
    pad()
    prop=new Map()
    for(let r=0 ;r<g.length; ++r){
        for(let c=0 ;c<g[0].length; ++c){
            if(g[r][c]=='#') propose(r,c)
        }
    }
}

function propose(r,c){
    let bv=evasur(r,c)
    if(!bv) return
    for(let i=0; i<4 ;++i){
        if( bms[(sd+i)%4] & bv ) continue
        let [dr,dc]=dirs[(sd+i)%4] , key
        key=(r+dr)+','+(c+dc)
        if(prop.has(key)) prop.set(key,null) 
        else              prop.set(key,[r,c])
        break
    }
}

function evasur(r,c){
    let p=[] , bv=0
    for(let [dr,dc] of [[-1,-1],[0,1],[0,1],[1,0],[1,0],[0,-1],[0,-1],[-1,0]]){
        r+=dr;c+=dc
        bv<<=1
        bv|=g[r][c]=='#'
    }
    return bv
}

function pad(){
    if(rx==g.length-1)  g.push   (Array(g[0].length).fill('.'))
    if(rn==0){rx++;rn=1;g.unshift(Array(g[0].length).fill('.')) }
    if(cx==g[0].length-1) for(let i=0; i<g.length; ++i) g[i].push   ('.')
    if(cn==0){cx++;cn=1;  for(let i=0; i<g.length; ++i) g[i].unshift('.') }
}

function round(){
    proposeAll()
    move()
    sd=(sd+1)%4
    // l(rn,cn,rx,cx)
    // g.vis()
}